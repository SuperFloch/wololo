// src-electron/electron-preload.js
var { contextBridge, ipcRenderer } = require("electron");
var ipc = {
  render: {
    send: [
      "img:rename",
      "file:write",
      "img:upload"
    ],
    receive: [],
    sendReceive: [
      "folder:load",
      "folder:create",
      "file:read",
      "img:convert:webp",
      "img:convert:webm",
      "img:getFrames",
      "webm:resize"
    ]
  }
};
contextBridge.exposeInMainWorld(
  "ipcRenderer",
  {
    send: (channel, args) => {
      const validChannels = ipc.render.send;
      if (validChannels.includes(channel)) {
        ipcRenderer.send(channel, args);
      }
    },
    receive: (channel, listener) => {
      const validChannels = ipc.render.receive;
      if (validChannels.includes(channel)) {
        ipcRenderer.on(channel, (event, ...args) => listener(...args));
      }
    },
    invoke: (channel, args) => {
      const validChannels = ipc.render.sendReceive;
      if (validChannels.includes(channel)) {
        return ipcRenderer.invoke(channel, args);
      }
    }
  }
);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjLWVsZWN0cm9uL2VsZWN0cm9uLXByZWxvYWQuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxyXG4gKiBUaGlzIGZpbGUgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXHJcbiAqIEhlcmUgeW91IGNhbiBhY2Nlc3MgTm9kZWpzIHN0dWZmIGFuZCBpbmplY3QgZnVuY3Rpb25hbGl0eSBpbnRvXHJcbiAqIHRoZSByZW5kZXJlciB0aHJlYWQgKGFjY2Vzc2libGUgdGhlcmUgdGhyb3VnaCB0aGUgXCJ3aW5kb3dcIiBvYmplY3QpXHJcbiAqXHJcbiAqIFdBUk5JTkchXHJcbiAqIElmIHlvdSBpbXBvcnQgYW55dGhpbmcgZnJvbSBub2RlX21vZHVsZXMsIHRoZW4gbWFrZSBzdXJlIHRoYXQgdGhlIHBhY2thZ2UgaXMgc3BlY2lmaWVkXHJcbiAqIGluIHBhY2thZ2UuanNvbiA+IGRlcGVuZGVuY2llcyBhbmQgTk9UIGluIGRldkRlcGVuZGVuY2llc1xyXG4gKlxyXG4gKiBFeGFtcGxlIChpbmplY3RzIHdpbmRvdy5teUFQSS5kb0FUaGluZygpIGludG8gcmVuZGVyZXIgdGhyZWFkKTpcclxuICpcclxuICogICBpbXBvcnQgeyBjb250ZXh0QnJpZGdlIH0gZnJvbSAnZWxlY3Ryb24nXHJcbiAqXHJcbiAqICAgY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnbXlBUEknLCB7XHJcbiAqICAgICBkb0FUaGluZzogKCkgPT4ge31cclxuICogICB9KVxyXG4gKlxyXG4gKiBXQVJOSU5HIVxyXG4gKiBJZiBhY2Nlc3NpbmcgTm9kZSBmdW5jdGlvbmFsaXR5IChsaWtlIGltcG9ydGluZyBAZWxlY3Ryb24vcmVtb3RlKSB0aGVuIGluIHlvdXJcclxuICogZWxlY3Ryb24tbWFpbi5qcyB5b3Ugd2lsbCBuZWVkIHRvIHNldCB0aGUgZm9sbG93aW5nIHdoZW4geW91IGluc3RhbnRpYXRlIEJyb3dzZXJXaW5kb3c6XHJcbiAqXHJcbiAqIG1haW5XaW5kb3cgPSBuZXcgQnJvd3NlcldpbmRvdyh7XHJcbiAqICAgLy8gLi4uXHJcbiAqICAgd2ViUHJlZmVyZW5jZXM6IHtcclxuICogICAgIC8vIC4uLlxyXG4gKiAgICAgc2FuZGJveDogZmFsc2UgLy8gPC0tIHRvIGJlIGFibGUgdG8gaW1wb3J0IEBlbGVjdHJvbi9yZW1vdGUgaW4gcHJlbG9hZCBzY3JpcHRcclxuICogICB9XHJcbiAqIH1cclxuICovXHJcbmNvbnN0IHsgY29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXIgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuXHJcbi8vIFdoaXRlLWxpc3RlZCBjaGFubmVscy5cclxuY29uc3QgaXBjID0ge1xyXG4gICAgcmVuZGVyOiB7XHJcbiAgICAgICAgLy8gRnJvbSByZW5kZXIgdG8gbWFpbi5cclxuICAgICAgICBzZW5kOiBbXHJcbiAgICAgICAgICAgICdpbWc6cmVuYW1lJyxcclxuICAgICAgICAgICAgJ2ZpbGU6d3JpdGUnLFxyXG4gICAgICAgICAgICAnaW1nOnVwbG9hZCdcclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIEZyb20gbWFpbiB0byByZW5kZXIuXHJcbiAgICAgICAgcmVjZWl2ZTogW1xyXG5cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIEZyb20gcmVuZGVyIHRvIG1haW4gYW5kIGJhY2sgYWdhaW4uXHJcbiAgICAgICAgc2VuZFJlY2VpdmU6IFtcclxuICAgICAgICAgICAgJ2ZvbGRlcjpsb2FkJyxcclxuICAgICAgICAgICAgJ2ZvbGRlcjpjcmVhdGUnLFxyXG4gICAgICAgICAgICAnZmlsZTpyZWFkJyxcclxuICAgICAgICAgICAgJ2ltZzpjb252ZXJ0OndlYnAnLFxyXG4gICAgICAgICAgICAnaW1nOmNvbnZlcnQ6d2VibScsXHJcbiAgICAgICAgICAgICdpbWc6Z2V0RnJhbWVzJyxcclxuICAgICAgICAgICAgJ3dlYm06cmVzaXplJ1xyXG4gICAgICAgIF1cclxuICAgIH1cclxufVxyXG5cclxuLy8gRXhwb3NlZCBwcm90ZWN0ZWQgbWV0aG9kcyBpbiB0aGUgcmVuZGVyIHByb2Nlc3MuXHJcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoXHJcbiAgICAvLyBBbGxvd2VkICdpcGNSZW5kZXJlcicgbWV0aG9kcy5cclxuICAgICdpcGNSZW5kZXJlcicsIHtcclxuICAgIC8vIEZyb20gcmVuZGVyIHRvIG1haW4uXHJcbiAgICBzZW5kOiAoY2hhbm5lbCwgYXJncykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbGlkQ2hhbm5lbHMgPSBpcGMucmVuZGVyLnNlbmRcclxuICAgICAgICBpZiAodmFsaWRDaGFubmVscy5pbmNsdWRlcyhjaGFubmVsKSkge1xyXG4gICAgICAgICAgICBpcGNSZW5kZXJlci5zZW5kKGNoYW5uZWwsIGFyZ3MpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIEZyb20gbWFpbiB0byByZW5kZXIuXHJcbiAgICByZWNlaXZlOiAoY2hhbm5lbCwgbGlzdGVuZXIpID0+IHtcclxuICAgICAgICBjb25zdCB2YWxpZENoYW5uZWxzID0gaXBjLnJlbmRlci5yZWNlaXZlXHJcbiAgICAgICAgaWYgKHZhbGlkQ2hhbm5lbHMuaW5jbHVkZXMoY2hhbm5lbCkpIHtcclxuICAgICAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IHN0cmlwIGV2ZW50IGFzIGl0IGluY2x1ZGVzIGBzZW5kZXJgLlxyXG4gICAgICAgICAgICBpcGNSZW5kZXJlci5vbihjaGFubmVsLCAoZXZlbnQsIC4uLmFyZ3MpID0+IGxpc3RlbmVyKC4uLmFyZ3MpKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBGcm9tIHJlbmRlciB0byBtYWluIGFuZCBiYWNrIGFnYWluLlxyXG4gICAgaW52b2tlOiAoY2hhbm5lbCwgYXJncykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbGlkQ2hhbm5lbHMgPSBpcGMucmVuZGVyLnNlbmRSZWNlaXZlXHJcbiAgICAgICAgaWYgKHZhbGlkQ2hhbm5lbHMuaW5jbHVkZXMoY2hhbm5lbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLmludm9rZShjaGFubmVsLCBhcmdzKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4pIl0sCiAgIm1hcHBpbmdzIjogIjtBQTZCQSxJQUFNLEVBQUUsZUFBZSxZQUFZLElBQUksUUFBUTtBQUcvQyxJQUFNLE1BQU07QUFBQSxFQUNSLFFBQVE7QUFBQSxJQUVKLE1BQU07QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNKO0FBQUEsSUFFQSxTQUFTLENBRVQ7QUFBQSxJQUVBLGFBQWE7QUFBQSxNQUNUO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjtBQUdBLGNBQWM7QUFBQSxFQUVWO0FBQUEsRUFBZTtBQUFBLElBRWYsTUFBTSxDQUFDLFNBQVMsU0FBUztBQUNyQixZQUFNLGdCQUFnQixJQUFJLE9BQU87QUFDakMsVUFBSSxjQUFjLFNBQVMsT0FBTyxHQUFHO0FBQ2pDLG9CQUFZLEtBQUssU0FBUyxJQUFJO0FBQUEsTUFDbEM7QUFBQSxJQUNKO0FBQUEsSUFFQSxTQUFTLENBQUMsU0FBUyxhQUFhO0FBQzVCLFlBQU0sZ0JBQWdCLElBQUksT0FBTztBQUNqQyxVQUFJLGNBQWMsU0FBUyxPQUFPLEdBQUc7QUFFakMsb0JBQVksR0FBRyxTQUFTLENBQUMsVUFBVSxTQUFTLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFBQSxNQUNqRTtBQUFBLElBQ0o7QUFBQSxJQUVBLFFBQVEsQ0FBQyxTQUFTLFNBQVM7QUFDdkIsWUFBTSxnQkFBZ0IsSUFBSSxPQUFPO0FBQ2pDLFVBQUksY0FBYyxTQUFTLE9BQU8sR0FBRztBQUNqQyxlQUFPLFlBQVksT0FBTyxTQUFTLElBQUk7QUFBQSxNQUMzQztBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0E7IiwKICAibmFtZXMiOiBbXQp9Cg==
