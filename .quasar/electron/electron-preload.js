// src-electron/electron-preload.js
var { contextBridge, ipcRenderer } = require("electron");
var ipc = {
  render: {
    send: [
      "img:rename",
      "file:write",
      "quit"
    ],
    receive: [],
    sendReceive: [
      "folder:load",
      "folder:create",
      "folder:read",
      "file:read",
      "file:delete",
      "file:convert",
      "img:upload",
      "img:remove-bg",
      "video:download",
      "audio:download",
      "video:clip",
      "video:crop",
      "clear"
    ]
  }
};
contextBridge.exposeInMainWorld(
  "ipcRenderer",
  {
    send: (channel, args) => {
      const validChannels = ipc.render.send;
      if (validChannels.includes(channel)) {
        ipcRenderer.send(channel, args);
      }
    },
    receive: (channel, listener) => {
      const validChannels = ipc.render.receive;
      if (validChannels.includes(channel)) {
        ipcRenderer.on(channel, (event, ...args) => listener(...args));
      }
    },
    invoke: (channel, args) => {
      const validChannels = ipc.render.sendReceive;
      if (validChannels.includes(channel)) {
        return ipcRenderer.invoke(channel, args);
      }
    }
  }
);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjLWVsZWN0cm9uL2VsZWN0cm9uLXByZWxvYWQuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxyXG4gKiBUaGlzIGZpbGUgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXHJcbiAqIEhlcmUgeW91IGNhbiBhY2Nlc3MgTm9kZWpzIHN0dWZmIGFuZCBpbmplY3QgZnVuY3Rpb25hbGl0eSBpbnRvXHJcbiAqIHRoZSByZW5kZXJlciB0aHJlYWQgKGFjY2Vzc2libGUgdGhlcmUgdGhyb3VnaCB0aGUgXCJ3aW5kb3dcIiBvYmplY3QpXHJcbiAqXHJcbiAqIFdBUk5JTkchXHJcbiAqIElmIHlvdSBpbXBvcnQgYW55dGhpbmcgZnJvbSBub2RlX21vZHVsZXMsIHRoZW4gbWFrZSBzdXJlIHRoYXQgdGhlIHBhY2thZ2UgaXMgc3BlY2lmaWVkXHJcbiAqIGluIHBhY2thZ2UuanNvbiA+IGRlcGVuZGVuY2llcyBhbmQgTk9UIGluIGRldkRlcGVuZGVuY2llc1xyXG4gKlxyXG4gKiBFeGFtcGxlIChpbmplY3RzIHdpbmRvdy5teUFQSS5kb0FUaGluZygpIGludG8gcmVuZGVyZXIgdGhyZWFkKTpcclxuICpcclxuICogICBpbXBvcnQgeyBjb250ZXh0QnJpZGdlIH0gZnJvbSAnZWxlY3Ryb24nXHJcbiAqXHJcbiAqICAgY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnbXlBUEknLCB7XHJcbiAqICAgICBkb0FUaGluZzogKCkgPT4ge31cclxuICogICB9KVxyXG4gKlxyXG4gKiBXQVJOSU5HIVxyXG4gKiBJZiBhY2Nlc3NpbmcgTm9kZSBmdW5jdGlvbmFsaXR5IChsaWtlIGltcG9ydGluZyBAZWxlY3Ryb24vcmVtb3RlKSB0aGVuIGluIHlvdXJcclxuICogZWxlY3Ryb24tbWFpbi5qcyB5b3Ugd2lsbCBuZWVkIHRvIHNldCB0aGUgZm9sbG93aW5nIHdoZW4geW91IGluc3RhbnRpYXRlIEJyb3dzZXJXaW5kb3c6XHJcbiAqXHJcbiAqIG1haW5XaW5kb3cgPSBuZXcgQnJvd3NlcldpbmRvdyh7XHJcbiAqICAgLy8gLi4uXHJcbiAqICAgd2ViUHJlZmVyZW5jZXM6IHtcclxuICogICAgIC8vIC4uLlxyXG4gKiAgICAgc2FuZGJveDogZmFsc2UgLy8gPC0tIHRvIGJlIGFibGUgdG8gaW1wb3J0IEBlbGVjdHJvbi9yZW1vdGUgaW4gcHJlbG9hZCBzY3JpcHRcclxuICogICB9XHJcbiAqIH1cclxuICovXHJcbmNvbnN0IHsgY29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXIgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuXHJcbi8vIFdoaXRlLWxpc3RlZCBjaGFubmVscy5cclxuY29uc3QgaXBjID0ge1xyXG4gICAgcmVuZGVyOiB7XHJcbiAgICAgICAgLy8gRnJvbSByZW5kZXIgdG8gbWFpbi5cclxuICAgICAgICBzZW5kOiBbXHJcbiAgICAgICAgICAgICdpbWc6cmVuYW1lJyxcclxuICAgICAgICAgICAgJ2ZpbGU6d3JpdGUnLFxyXG4gICAgICAgICAgICAncXVpdCdcclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIEZyb20gbWFpbiB0byByZW5kZXIuXHJcbiAgICAgICAgcmVjZWl2ZTogW1xyXG5cclxuICAgICAgICBdLFxyXG4gICAgICAgIC8vIEZyb20gcmVuZGVyIHRvIG1haW4gYW5kIGJhY2sgYWdhaW4uXHJcbiAgICAgICAgc2VuZFJlY2VpdmU6IFtcclxuICAgICAgICAgICAgJ2ZvbGRlcjpsb2FkJyxcclxuICAgICAgICAgICAgJ2ZvbGRlcjpjcmVhdGUnLFxyXG4gICAgICAgICAgICAnZm9sZGVyOnJlYWQnLFxyXG4gICAgICAgICAgICAnZmlsZTpyZWFkJyxcclxuICAgICAgICAgICAgJ2ZpbGU6ZGVsZXRlJyxcclxuICAgICAgICAgICAgJ2ZpbGU6Y29udmVydCcsXHJcbiAgICAgICAgICAgICdpbWc6dXBsb2FkJyxcclxuICAgICAgICAgICAgJ2ltZzpyZW1vdmUtYmcnLFxyXG4gICAgICAgICAgICAndmlkZW86ZG93bmxvYWQnLFxyXG4gICAgICAgICAgICAnYXVkaW86ZG93bmxvYWQnLFxyXG4gICAgICAgICAgICAndmlkZW86Y2xpcCcsXHJcbiAgICAgICAgICAgICd2aWRlbzpjcm9wJyxcclxuICAgICAgICAgICAgJ2NsZWFyJ1xyXG4gICAgICAgIF1cclxuICAgIH1cclxufVxyXG5cclxuLy8gRXhwb3NlZCBwcm90ZWN0ZWQgbWV0aG9kcyBpbiB0aGUgcmVuZGVyIHByb2Nlc3MuXHJcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoXHJcbiAgICAvLyBBbGxvd2VkICdpcGNSZW5kZXJlcicgbWV0aG9kcy5cclxuICAgICdpcGNSZW5kZXJlcicsIHtcclxuICAgICAgICAvLyBGcm9tIHJlbmRlciB0byBtYWluLlxyXG4gICAgICAgIHNlbmQ6IChjaGFubmVsLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkQ2hhbm5lbHMgPSBpcGMucmVuZGVyLnNlbmRcclxuICAgICAgICAgICAgaWYgKHZhbGlkQ2hhbm5lbHMuaW5jbHVkZXMoY2hhbm5lbCkpIHtcclxuICAgICAgICAgICAgICAgIGlwY1JlbmRlcmVyLnNlbmQoY2hhbm5lbCwgYXJncylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gRnJvbSBtYWluIHRvIHJlbmRlci5cclxuICAgICAgICByZWNlaXZlOiAoY2hhbm5lbCwgbGlzdGVuZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmFsaWRDaGFubmVscyA9IGlwYy5yZW5kZXIucmVjZWl2ZVxyXG4gICAgICAgICAgICBpZiAodmFsaWRDaGFubmVscy5pbmNsdWRlcyhjaGFubmVsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IHN0cmlwIGV2ZW50IGFzIGl0IGluY2x1ZGVzIGBzZW5kZXJgLlxyXG4gICAgICAgICAgICAgICAgaXBjUmVuZGVyZXIub24oY2hhbm5lbCwgKGV2ZW50LCAuLi5hcmdzKSA9PiBsaXN0ZW5lciguLi5hcmdzKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gRnJvbSByZW5kZXIgdG8gbWFpbiBhbmQgYmFjayBhZ2Fpbi5cclxuICAgICAgICBpbnZva2U6IChjaGFubmVsLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkQ2hhbm5lbHMgPSBpcGMucmVuZGVyLnNlbmRSZWNlaXZlXHJcbiAgICAgICAgICAgIGlmICh2YWxpZENoYW5uZWxzLmluY2x1ZGVzKGNoYW5uZWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwsIGFyZ3MpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbikiXSwKICAibWFwcGluZ3MiOiAiO0FBNkJBLElBQU0sRUFBRSxlQUFlLFlBQVksSUFBSSxRQUFRO0FBRy9DLElBQU0sTUFBTTtBQUFBLEVBQ1IsUUFBUTtBQUFBLElBRUosTUFBTTtBQUFBLE1BQ0Y7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0o7QUFBQSxJQUVBLFNBQVMsQ0FFVDtBQUFBLElBRUEsYUFBYTtBQUFBLE1BQ1Q7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKO0FBR0EsY0FBYztBQUFBLEVBRVY7QUFBQSxFQUFlO0FBQUEsSUFFWCxNQUFNLENBQUMsU0FBUyxTQUFTO0FBQ3JCLFlBQU0sZ0JBQWdCLElBQUksT0FBTztBQUNqQyxVQUFJLGNBQWMsU0FBUyxPQUFPLEdBQUc7QUFDakMsb0JBQVksS0FBSyxTQUFTLElBQUk7QUFBQSxNQUNsQztBQUFBLElBQ0o7QUFBQSxJQUVBLFNBQVMsQ0FBQyxTQUFTLGFBQWE7QUFDNUIsWUFBTSxnQkFBZ0IsSUFBSSxPQUFPO0FBQ2pDLFVBQUksY0FBYyxTQUFTLE9BQU8sR0FBRztBQUVqQyxvQkFBWSxHQUFHLFNBQVMsQ0FBQyxVQUFVLFNBQVMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUFBLE1BQ2pFO0FBQUEsSUFDSjtBQUFBLElBRUEsUUFBUSxDQUFDLFNBQVMsU0FBUztBQUN2QixZQUFNLGdCQUFnQixJQUFJLE9BQU87QUFDakMsVUFBSSxjQUFjLFNBQVMsT0FBTyxHQUFHO0FBQ2pDLGVBQU8sWUFBWSxPQUFPLFNBQVMsSUFBSTtBQUFBLE1BQzNDO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
